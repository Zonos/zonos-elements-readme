/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { ContactOption, PaymentIntent, Stripe } from "@stripe/stripe-js";
import { EnteredInfo, TranslatedAddressObject } from "./types/checkout/TranslatedText";
import { SubmitEventData } from "./components/checkout/zonos-checkout/zonos-address-update-dialog/zonos-address-update-dialog";
import { CheckboxColorPrefix, Color, ColorPrefix } from "./types/styles/Color";
import { BannerIntent } from "./components/common/zonos-banner/zonos-banner";
import { CountryCode, ElementsUiStyle, ElementsUiTheme, HelloMobileLocation } from "./types/generated/graphql.customer.types";
import { FontWeight, Size, Type } from "./types/styles/Text";
import { AppearanceConfig } from "./components/store/zonosStore";
import { StripeStoreContactOption } from "./components/store/checkout/stripe";
import { TabItem, TabItems } from "./components/store/checkout/cart";
import { LoadZonosParamsConfig } from "./scripts/_zonosBase";
import { NotificationInit } from "./components/common/zonos-notification/zonos-notification";
import { RestrictedItem } from "./types/hello/RestrictedItem";
import { AppearanceConfig as AppearanceConfig1 } from "./components.d";
import { ShippingRichRadioItem } from "./components/common/zonos-shipping-rich-radio/zonos-shipping-rich-radio";
import { SpinnerColor } from "./components/common/zonos-spinner/zonos-spinner";
import { GridSpacing } from "./types/styles/GridSpacing";
export { ContactOption, PaymentIntent, Stripe } from "@stripe/stripe-js";
export { EnteredInfo, TranslatedAddressObject } from "./types/checkout/TranslatedText";
export { SubmitEventData } from "./components/checkout/zonos-checkout/zonos-address-update-dialog/zonos-address-update-dialog";
export { CheckboxColorPrefix, Color, ColorPrefix } from "./types/styles/Color";
export { BannerIntent } from "./components/common/zonos-banner/zonos-banner";
export { CountryCode, ElementsUiStyle, ElementsUiTheme, HelloMobileLocation } from "./types/generated/graphql.customer.types";
export { FontWeight, Size, Type } from "./types/styles/Text";
export { AppearanceConfig } from "./components/store/zonosStore";
export { StripeStoreContactOption } from "./components/store/checkout/stripe";
export { TabItem, TabItems } from "./components/store/checkout/cart";
export { LoadZonosParamsConfig } from "./scripts/_zonosBase";
export { NotificationInit } from "./components/common/zonos-notification/zonos-notification";
export { RestrictedItem } from "./types/hello/RestrictedItem";
export { AppearanceConfig as AppearanceConfig1 } from "./components.d";
export { ShippingRichRadioItem } from "./components/common/zonos-shipping-rich-radio/zonos-shipping-rich-radio";
export { SpinnerColor } from "./components/common/zonos-spinner/zonos-spinner";
export { GridSpacing } from "./types/styles/GridSpacing";
export namespace Components {
    interface ZonosAddress {
        /**
          * Default address for stripe
         */
        "defaultAddress": ContactOption | null;
        /**
          * The title text for the address element
         */
        "titleText": string;
        /**
          * The type of address element to render
         */
        "type": 'billing' | 'shipping';
    }
    interface ZonosAddressDisplay {
        /**
          * Title for the address display
         */
        "addressType": 'shipping' | 'billing';
        /**
          * Address to show up
         */
        "currentAddress": EnteredInfo;
    }
    interface ZonosAddressForm {
        /**
          * Title for the address form
         */
        "addressType": 'shipping' | 'billing';
        /**
          * Address to show up
         */
        "currentAddress": EnteredInfo;
        /**
          * Translated address
         */
        "translatedAddress": TranslatedAddressObject;
    }
    interface ZonosAddressUpdateDialog {
        /**
          * Billing address that user has entered (optional if billing is the same as shipping)
         */
        "billingAddress": EnteredInfo | null;
        /**
          * Whether or not the continue button is loading
         */
        "continueLoading": boolean;
        /**
          * Whether or not the dialog is loading
         */
        "dialogLoading": boolean;
        /**
          * Whether or not the dialog is open
         */
        "dialogOpen": boolean;
        /**
          * Whether or not the dialog is open
         */
        "isMobile": boolean;
        /**
          * Shipping address that user has entered
         */
        "shippingAddress": EnteredInfo;
        /**
          * Button color of the submit button
         */
        "submitBtnColor"?: string;
        /**
          * Button type of the submit button
         */
        "submitBtnType"?: HTMLZonosButtonElement['variant'];
        /**
          * Translated address fields that GPT has translated
         */
        "translatedBillingAddress": TranslatedAddressObject;
        /**
          * Translated address fields that GPT has translated
         */
        "translatedShippingAddress": TranslatedAddressObject;
    }
    interface ZonosBadge {
        /**
          * The size of the badge
          * @default 24
         */
        "badgeColor": ColorPrefix;
        /**
          * Whether or not the badge is bold
          * @default false
         */
        "bold": boolean;
        /**
          * The icon element to display
          * @default null
         */
        "icon"?: HTMLZonosIconElement;
        /**
          * Position the icon to the right when icon is specified
          * @default false
         */
        "iconRight": boolean;
        /**
          * Whether or not the badge is rounded
          * @default false
         */
        "rounded": boolean;
        /**
          * The size of the badge
          * @default 'default'
         */
        "size": 'small' | 'default';
    }
    interface ZonosBanner {
        /**
          * Whether or not the banner is bold
         */
        "bannerTitle"?: string;
        /**
          * Intent of the banner (success, warning, error)
         */
        "intent"?: BannerIntent;
    }
    interface ZonosButton {
        /**
          * The color of the button text and svg **NOTE**: If the button `variant` is set to 'standard', backgroundColor will be disregarded
         */
        "backgroundColor"?: Color | (string & { _placeholder?: never });
        /**
          * The border style of the button
          * @default ROUNDED
         */
        "borderStyle"?: ElementsUiStyle;
        /**
          * The color of the button text and svg
         */
        "buttonColor"?: Color | (string & { _placeholder?: never });
        /**
          * The icon element to display
          * @default null
         */
        "icon": HTMLZonosIconElement | null;
        /**
          * Whether or not the icon is on the right
          * @default false
         */
        "iconRight"?: boolean;
        /**
          * Whether or not the button is disabled
          * @note Prop should not conflict name with native html attribute if the prop is also affected by another prop. The issue is the component has internal disabled
          * @prop ().
          * @prop decorator is to watch the update of the attribute of the component in the dom. And `disabled` prop is not an only factor to determine the component is disabled. isLoading
          * @prop () also affect that. <Host> is also referred to a component itself, if disabled prop is true, the `zonos-button` will have disabled attribute. So let's say when the loading state is true, and the component consume the zonos-button doesn't pass the disabled prop down. It accidentally turns the disabled prop on even thought the disabled state is not changed from the outside.
         */
        "isDisabled": boolean;
        /**
          * Whether or not the button is loading
         */
        "loading": boolean;
        /**
          * Whether or not the button has a background
          * @default false
         */
        "noBackground": boolean;
        /**
          * Whether or not the button has a left padding
         */
        "noPaddingLeft": boolean;
        /**
          * Whether or not the button has a right padding
         */
        "noPaddingRight": boolean;
        /**
          * The size of the button
          * @default 'sm'
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The theme of the button
         */
        "theme"?: ElementsUiTheme;
        /**
          * The variance of the button
          * @note If the button `variant` is set to 'standard', backgroundColor will be disregarded
          * @default standard
         */
        "variant": | 'primary'
    | 'success'
    | 'subtle'
    | 'outline'
    | 'standard'
    | 'danger'
    | 'warning';
        /**
          * Whether or not the button has a box shadow
         */
        "withBoxShadow": boolean;
    }
    interface ZonosCard {
        /**
          * The actions to display in the header of the card
         */
        "actions"?: HTMLElement;
        /**
          * The actions to display in the footer of the card
         */
        "footerActions"?: HTMLElement;
        /**
          * The content to display in the footer of the card
         */
        "footerContent"?: HTMLElement;
        /**
          * The height of the footer in pixels
         */
        "footerHeight"?: number;
        /**
          * The label to display in the header of the card
         */
        "label"?: HTMLElement;
        /**
          * The spacing to apply between elements in the card
         */
        "spacing"?: string;
    }
    interface ZonosCartItems {
    }
    interface ZonosCartRestrictedItems {
        /**
          * This is to hide the section when the parent collapse on mobile
         */
        "hide": boolean;
    }
    interface ZonosCartSubtotal {
    }
    interface ZonosCheckbox {
        /**
          * background color of the checkbox
         */
        "backgroundColor": | CheckboxColorPrefix
    | (string & { _placeholder?: never });
        /**
          * The border style of the button
          * @default ROUNDED
         */
        "borderStyle"?: ElementsUiStyle;
        /**
          * Font size of the checkbox text
         */
        "fontSize": Size;
        /**
          * Whether or not the checkbox is checked
         */
        "isChecked": boolean;
        /**
          * Whether or not the checkbox is disabled
         */
        "isDisabled": boolean;
        /**
          * The label of the checkbox
         */
        "label"?: string;
        /**
          * Size of the checkbox
         */
        "size": 12 | 16 | 24;
    }
    interface ZonosCheckout {
        /**
          * Override appearance config
         */
        "appearanceSettingsOverride"?: Partial<AppearanceConfig>;
        /**
          * Close dialog action
         */
        "closeDialogHandler": (props?: { confirmed: boolean; }) => Promise<void>;
        /**
          * Default address to use for the checkout (preview mode)
         */
        "defaultAddress": StripeStoreContactOption | null;
        /**
          * Force dialog to be open
         */
        "forceDialogOpen": boolean;
        /**
          * Setup all of the event listeners for the component on first load
         */
        "init": () => Promise<void>;
        /**
          * Flag to determine if the checkout is on mobile
         */
        "mobile": boolean;
        /**
          * Preview checkout without needing to click on the button. This would be useful for demo purpose
         */
        "preview": boolean;
        /**
          * For storybook to set to finish step, this is to trigger in the story for zonos-checkout-finish
         */
        "setToFinishStep": (forcePaymentStatus?: PaymentIntent['status']) => Promise<void>;
    }
    interface ZonosCheckoutFinish {
        /**
          * The border radius style of the dialog
         */
        "borderRadius": ElementsUiStyle;
        /**
          * Override the notification message and title, bypass checking stripe payment status
         */
        "overrideNotification"?: {
    messages: string[];
    title: string;
    type: 'success' | 'error';
  };
        /**
          * Force status to test the UI for storybook
         */
        "storybookForceStatus"?: PaymentIntent['status'];
    }
    interface ZonosCheckoutFooter {
        /**
          * Theme to change the color of the logo
         */
        "dataTheme"?: ElementsUiTheme;
        /**
          * Override mobile mode
         */
        "mobile": boolean;
    }
    interface ZonosCheckoutPayment {
        /**
          * Whether or not the continue button is loading
         */
        "continueLoading": boolean;
        /**
          * Error occurred during payment
         */
        "paymentError": boolean;
        /**
          * Submit button main color
         */
        "submitBtnColor"?: string;
        /**
          * Whether or not the checkout is in mobile mode
         */
        "submitBtnType"?: HTMLZonosButtonElement['variant'];
    }
    interface ZonosCheckoutProgressTabs {
        /**
          * Background color of the parent that's wrapped around the tab progress bar
         */
        "backgroundColor"?: Color | (string & { _placeholder?: never }) | null;
        /**
          * Set the tab items data. This is to be used in storybook
         */
        "setTabItems": (tabItems: TabItems) => Promise<void>;
        /**
          * Set selected tab. Only set the tab if it's clickable
         */
        "setTabSelected": (tabValue: TabItem['value']) => Promise<void>;
        /**
          * Color of the tab progress bar and label, override the secondary color of the appearance settings
         */
        "tabColor"?: string | null;
    }
    interface ZonosCollapse {
        /**
          * Collapsed size when collapsed
         */
        "collapseSize": number;
        /**
          * Collapsed state of the element
         */
        "collapsed": boolean;
    }
    interface ZonosComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ZonosConfirmDialog {
        /**
          * Cancel button text
         */
        "dialogCancelBtnText": string;
        /**
          * Confirm button text
         */
        "dialogConfirmBtnText": string;
        /**
          * Dialog intent (for icon and button color)
          * @default "info"
         */
        "dialogIntent": 'info' | 'danger' | 'warn';
        /**
          * Whether or not the dialog is open
         */
        "dialogOpen": boolean;
        /**
          * Dialog subtitle text
          * @default "" No subtitle
         */
        "dialogSubtitle": string;
        /**
          * Dialog title text
          * @default "Are you sure?"
         */
        "dialogTitle": string;
        /**
          * Whether or not the dialog is open
         */
        "isMobile": boolean;
        /**
          * Whether or not to close the dialog when clicking outside of it
          * @default false
         */
        "noClickOutside": boolean;
        /**
          * Submit button main color
         */
        "submitBtnColor"?: string;
    }
    interface ZonosController {
        /**
          * The zonos config object
         */
        "config": LoadZonosParamsConfig;
        /**
          * Get appearance from setting
         */
        "getAppearanceSetting": () => Promise<AppearanceConfig>;
        /**
          * Method to initialize checkout element
         */
        "initCheckoutElement": (stripe: Stripe) => Promise<void>;
        /**
          * Override the setting
          * @param config config that need to override the default setting
         */
        "overrideConfig": (config: LoadZonosParamsConfig) => Promise<void>;
        /**
          * Override country code for storybook
         */
        "overrideCountry": (countryCode: CountryCode) => Promise<void>;
        /**
          * Setup google font
         */
        "setupGoogleFont": (overrideFont?: string) => Promise<void>;
        /**
          * Show notification
         */
        "showNotification": (notification: NotificationInit) => Promise<void>;
        /**
          * Update the organizationName
         */
        "updateOrganizationName": (organizationName: string) => Promise<void>;
        /**
          * The zonos api key
         */
        "zonosApiKey": string;
    }
    interface ZonosCountryFlag {
        /**
          * The country code for the flag
          * @default localizationStore.selectedCountryCode
          * @example 'US'
         */
        "countryCode": CountryCode | null;
        /**
          * The size of the flag
         */
        "size"?: number;
    }
    interface ZonosCountrySelect {
        /**
          * Function to close the country select
          * @default () => {}
         */
        "handleOnClose": () => void;
    }
    interface ZonosCustomMessage {
        /**
          * The custom message icon
         */
        "icon": string;
        /**
          * The custom message text
         */
        "message": string;
    }
    interface ZonosCustomerInfo {
        /**
          * Whether or not the continue button is loading
         */
        "continueLoading": boolean;
        /**
          * Default address to use for the checkout (preview mode)
         */
        "defaultAddress": StripeStoreContactOption | null;
        /**
          * Whether or not the dialog is open
         */
        "isMobile": boolean;
        /**
          * Submit button main color
         */
        "submitBtnColor"?: string;
        /**
          * Whether or not the checkout is in mobile mode
         */
        "submitBtnType"?: HTMLZonosButtonElement['variant'];
    }
    interface ZonosDialog {
        /**
          * The border style of the button
          * @default ROUNDED
         */
        "borderStyle"?: ElementsUiStyle;
        /**
          * The header text for the dialog
         */
        "headerText": string;
        /**
          * The height of the dialog (max-width still 90vh)
         */
        "height"?: string;
        /**
          * Load loading spinner for the dialog or not
         */
        "isLoading": boolean;
        /**
          * The min height of the dialog
         */
        "minHeight"?: string;
        /**
          * Flag to determine if the checkout is on mobile
         */
        "mobile": boolean;
        /**
          * Whether or not to have body padding
          * @default false
         */
        "noBodyPadding": boolean;
        /**
          * Whether or not to have body padding
          * @default false
         */
        "noBorder": boolean;
        /**
          * Whether or not to close the dialog when clicking outside of it
          * @default false
         */
        "noClickOutside": boolean;
        /**
          * Whether or not to show the close button
          * @default false
         */
        "noCloseButton": boolean;
        /**
          * Whether or not to show the header
          * @default false
         */
        "noHeader": boolean;
        /**
          * Whether or not the dialog is open
          * @default false
         */
        "open": boolean;
        /**
          * The width of the dialog
          * @default 460px
         */
        "width": string;
    }
    interface ZonosHello {
        /**
          * Force left animation instead of detecting which side has more space
          * @default false
         */
        "animateFromLeftOverride"?: boolean;
        /**
          * Override the appearance settings
         */
        "appearanceSettingsOverride"?: Partial<AppearanceConfig>;
        /**
          * This method will convert the currency and return the converted value
          * @returns number
         */
        "convert": (value: number) => Promise<number>;
        /**
          * This method will call convert and format, and return the converted and formatted string
          * @returns string
         */
        "convertAndFormat": (value: number) => Promise<string>;
        /**
          * This method will trigger the currency conversion and display the converted value
          * @returns void
         */
        "displayCurrency": () => Promise<void>;
        /**
          * This method will format the currency and return the formatted string
          * @returns number
         */
        "format": (value: number) => Promise<string>;
        /**
          * Force mobile styling instead of media query and use the passed location value
          * @default false
         */
        "mobileLocationOverride"?: HelloMobileLocation;
        /**
          * This method show the hello dialog
          * @returns void
         */
        "openHelloDialog": (value: boolean) => Promise<void>;
    }
    interface ZonosHelloDialog {
        /**
          * Force left animation instead of detecting which side has more space
          * @default false
         */
        "animateFromLeftOverride"?: boolean;
        /**
          * Override the appearance settings
         */
        "appearanceSettings"?: Partial<AppearanceConfig>;
        /**
          * Whether or not the dialog is open
         */
        "isOpen": boolean;
        /**
          * Force mobile styling instead of media query and use the passed location value
          * @default false
         */
        "mobileLocationOverride"?: HelloMobileLocation;
        /**
          * Item restrictions array if any
          * @default []
         */
        "restrictedItems": RestrictedItem[];
        /**
          * The function to set the open state
          * @default () => {}
         */
        "setIsOpen": (isOpen: boolean) => void;
    }
    interface ZonosHelloDialogFooter {
        /**
          * Appearance settings
         */
        "appearanceSettings"?: Partial<AppearanceConfig>;
        /**
          * Whether or not the country select dialog is open
          * @default false
         */
        "setShowCountrySelect": (value: boolean) => void;
        /**
          * Whether or not the language select dialog is open
          * @default false
         */
        "setShowLanguageSelect": (value: boolean) => void;
    }
    interface ZonosIcon {
        /**
          * Determines if the icon should be auto height instead of square
          * @default false
         */
        "autoHeight": boolean;
        /**
          * The content of the icon (full svg)
          * @example import RemoveIcon from './assets/removeIcon.svg'; ... <zonos-icon content={RemoveIcon}></zonos-icon> // or <zonos-icon content="<svg>...</svg>"></zonos-icon>
         */
        "content": string;
        /**
          * Color of the SVG
          * @default 'gray-1200'
         */
        "iconColor": Color | (string & { _placeholder?: never });
        /**
          * The size of the icon
          * @default 24
         */
        "size": number;
    }
    interface ZonosInput {
        /**
          * Input label
         */
        "inputLabel": string;
        /**
          * Placeholder for the input
         */
        "inputPlaceholder": string;
        /**
          * Input size
         */
        "inputSize": 'sm' | 'md' | 'lg' | 'xl';
        /**
          * Value of the input
         */
        "inputValue": string;
        /**
          * Disables the input
         */
        "isDisabled": boolean;
        /**
          * Error state of the input
         */
        "isError": boolean;
    }
    interface ZonosLanguageSelect {
        /**
          * Function to close the language select
          * @default () => {}
         */
        "handleOnClose": () => void;
    }
    interface ZonosLink {
        /**
          * The href for the link
         */
        "href": string;
        /**
          * The title attribute for the link
         */
        "linkTitle"?: string;
        /**
          * The rel attribute for the link
         */
        "rel"?: string;
        /**
          * The target attribute for the link
         */
        "target"?: string;
    }
    interface ZonosLinkAuthentication {
        /**
          * Default email for stripe
         */
        "defaultEmail": string | null;
        /**
          * The title text for the authentication element
         */
        "titleText": string;
    }
    interface ZonosLogo {
        /**
          * Theme to change the color of the logo
         */
        "theme": ElementsUiTheme;
        /**
          * The width of the logo
         */
        "width": string;
    }
    interface ZonosNotification {
        /**
          * Show a notification
         */
        "showNotification": (notification: NotificationInit) => Promise<void>;
    }
    interface ZonosPayment {
        /**
          * The title text for the authentication element
         */
        "titleText"?: string;
    }
    interface ZonosReview {
        /**
          * Whether or not to show the collapse icon This is controled from the collapsed state of the zonos-collapse component to show the collapse icon
         */
        "collapsed": boolean;
        /**
          * Whether or not the component is being rendered with mobile styles
         */
        "mobile": boolean;
    }
    interface ZonosSelectDialogHeader {
        /**
          * Callback to do something on close
          * @default () => {}
         */
        "handleOnClose": () => void;
        /**
          * The label for the select dialog
         */
        "label": string;
    }
    interface ZonosShipping {
        /**
          * Whether or not the continue button is loading
         */
        "continueLoading": boolean;
        /**
          * Submit button main color
         */
        "submitBtnColor"?: string;
        /**
          * Whether or not the checkout is in mobile mode
         */
        "submitBtnType"?: HTMLZonosButtonElement['variant'];
    }
    interface ZonosShippingRichRadio {
        /**
          * Override border color of the radio item
         */
        "borderColor"?: Color | (string & { _placeholder?: never });
        /**
          * Override border color of the radio item
         */
        "borderStyle"?: ElementsUiStyle;
        /**
          * Initial selected value
         */
        "initialSelectedValue"?: string | number;
        /**
          * List of items to display
         */
        "items": ShippingRichRadioItem[];
        /**
          * Theme of the radio item
         */
        "theme"?: ElementsUiTheme;
    }
    interface ZonosSpinner {
        /**
          * The size of the spinner
          * @default 32
         */
        "size": number;
        /**
          * Color of the spinner
         */
        "spinnerColor"?: SpinnerColor;
    }
    interface ZonosText {
        /**
          * The size of the text
         */
        "size"?: Size;
        /**
          * The icon element to display
         */
        "textColor": Color | (string & { _placeholder?: never });
        /**
          * Type of the text to display
         */
        "type": Type;
        /**
          * The weight of the text
         */
        "weight"?: FontWeight;
    }
    interface ZonosTooltip {
        /**
          * The title of the tooltip
         */
        "label": string;
        /**
          * The subtitle of the tooltip
         */
        "subtitle": string;
    }
    interface ZonosVStack {
        /**
          * The spacing between elements in the stack
          * @default 24
         */
        "spacing": GridSpacing;
    }
}
export interface ZonosAddressCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosAddressElement;
}
export interface ZonosAddressFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosAddressFormElement;
}
export interface ZonosAddressUpdateDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosAddressUpdateDialogElement;
}
export interface ZonosCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosCheckboxElement;
}
export interface ZonosCheckoutFinishCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosCheckoutFinishElement;
}
export interface ZonosCheckoutPaymentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosCheckoutPaymentElement;
}
export interface ZonosConfirmDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosConfirmDialogElement;
}
export interface ZonosControllerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosControllerElement;
}
export interface ZonosCustomerInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosCustomerInfoElement;
}
export interface ZonosDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosDialogElement;
}
export interface ZonosHelloDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosHelloDialogElement;
}
export interface ZonosInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosInputElement;
}
export interface ZonosShippingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosShippingElement;
}
export interface ZonosShippingRichRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZonosShippingRichRadioElement;
}
declare global {
    interface HTMLZonosAddressElementEventMap {
        "invalidCharacters": boolean;
    }
    interface HTMLZonosAddressElement extends Components.ZonosAddress, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosAddressElementEventMap>(type: K, listener: (this: HTMLZonosAddressElement, ev: ZonosAddressCustomEvent<HTMLZonosAddressElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosAddressElementEventMap>(type: K, listener: (this: HTMLZonosAddressElement, ev: ZonosAddressCustomEvent<HTMLZonosAddressElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosAddressElement: {
        prototype: HTMLZonosAddressElement;
        new (): HTMLZonosAddressElement;
    };
    interface HTMLZonosAddressDisplayElement extends Components.ZonosAddressDisplay, HTMLStencilElement {
    }
    var HTMLZonosAddressDisplayElement: {
        prototype: HTMLZonosAddressDisplayElement;
        new (): HTMLZonosAddressDisplayElement;
    };
    interface HTMLZonosAddressFormElementEventMap {
        "addressChange": EnteredInfo;
    }
    interface HTMLZonosAddressFormElement extends Components.ZonosAddressForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosAddressFormElementEventMap>(type: K, listener: (this: HTMLZonosAddressFormElement, ev: ZonosAddressFormCustomEvent<HTMLZonosAddressFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosAddressFormElementEventMap>(type: K, listener: (this: HTMLZonosAddressFormElement, ev: ZonosAddressFormCustomEvent<HTMLZonosAddressFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosAddressFormElement: {
        prototype: HTMLZonosAddressFormElement;
        new (): HTMLZonosAddressFormElement;
    };
    interface HTMLZonosAddressUpdateDialogElementEventMap {
        "closeDialog": void;
        "continueClicked": SubmitEventData;
    }
    interface HTMLZonosAddressUpdateDialogElement extends Components.ZonosAddressUpdateDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosAddressUpdateDialogElementEventMap>(type: K, listener: (this: HTMLZonosAddressUpdateDialogElement, ev: ZonosAddressUpdateDialogCustomEvent<HTMLZonosAddressUpdateDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosAddressUpdateDialogElementEventMap>(type: K, listener: (this: HTMLZonosAddressUpdateDialogElement, ev: ZonosAddressUpdateDialogCustomEvent<HTMLZonosAddressUpdateDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosAddressUpdateDialogElement: {
        prototype: HTMLZonosAddressUpdateDialogElement;
        new (): HTMLZonosAddressUpdateDialogElement;
    };
    interface HTMLZonosBadgeElement extends Components.ZonosBadge, HTMLStencilElement {
    }
    var HTMLZonosBadgeElement: {
        prototype: HTMLZonosBadgeElement;
        new (): HTMLZonosBadgeElement;
    };
    interface HTMLZonosBannerElement extends Components.ZonosBanner, HTMLStencilElement {
    }
    var HTMLZonosBannerElement: {
        prototype: HTMLZonosBannerElement;
        new (): HTMLZonosBannerElement;
    };
    interface HTMLZonosButtonElement extends Components.ZonosButton, HTMLStencilElement {
    }
    var HTMLZonosButtonElement: {
        prototype: HTMLZonosButtonElement;
        new (): HTMLZonosButtonElement;
    };
    interface HTMLZonosCardElement extends Components.ZonosCard, HTMLStencilElement {
    }
    var HTMLZonosCardElement: {
        prototype: HTMLZonosCardElement;
        new (): HTMLZonosCardElement;
    };
    interface HTMLZonosCartItemsElement extends Components.ZonosCartItems, HTMLStencilElement {
    }
    var HTMLZonosCartItemsElement: {
        prototype: HTMLZonosCartItemsElement;
        new (): HTMLZonosCartItemsElement;
    };
    interface HTMLZonosCartRestrictedItemsElement extends Components.ZonosCartRestrictedItems, HTMLStencilElement {
    }
    var HTMLZonosCartRestrictedItemsElement: {
        prototype: HTMLZonosCartRestrictedItemsElement;
        new (): HTMLZonosCartRestrictedItemsElement;
    };
    interface HTMLZonosCartSubtotalElement extends Components.ZonosCartSubtotal, HTMLStencilElement {
    }
    var HTMLZonosCartSubtotalElement: {
        prototype: HTMLZonosCartSubtotalElement;
        new (): HTMLZonosCartSubtotalElement;
    };
    interface HTMLZonosCheckboxElementEventMap {
        "checkboxSelected": boolean;
    }
    interface HTMLZonosCheckboxElement extends Components.ZonosCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosCheckboxElementEventMap>(type: K, listener: (this: HTMLZonosCheckboxElement, ev: ZonosCheckboxCustomEvent<HTMLZonosCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosCheckboxElementEventMap>(type: K, listener: (this: HTMLZonosCheckboxElement, ev: ZonosCheckboxCustomEvent<HTMLZonosCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosCheckboxElement: {
        prototype: HTMLZonosCheckboxElement;
        new (): HTMLZonosCheckboxElement;
    };
    interface HTMLZonosCheckoutElement extends Components.ZonosCheckout, HTMLStencilElement {
    }
    var HTMLZonosCheckoutElement: {
        prototype: HTMLZonosCheckoutElement;
        new (): HTMLZonosCheckoutElement;
    };
    interface HTMLZonosCheckoutFinishElementEventMap {
        "closeClick": void;
    }
    interface HTMLZonosCheckoutFinishElement extends Components.ZonosCheckoutFinish, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosCheckoutFinishElementEventMap>(type: K, listener: (this: HTMLZonosCheckoutFinishElement, ev: ZonosCheckoutFinishCustomEvent<HTMLZonosCheckoutFinishElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosCheckoutFinishElementEventMap>(type: K, listener: (this: HTMLZonosCheckoutFinishElement, ev: ZonosCheckoutFinishCustomEvent<HTMLZonosCheckoutFinishElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosCheckoutFinishElement: {
        prototype: HTMLZonosCheckoutFinishElement;
        new (): HTMLZonosCheckoutFinishElement;
    };
    interface HTMLZonosCheckoutFooterElement extends Components.ZonosCheckoutFooter, HTMLStencilElement {
    }
    var HTMLZonosCheckoutFooterElement: {
        prototype: HTMLZonosCheckoutFooterElement;
        new (): HTMLZonosCheckoutFooterElement;
    };
    interface HTMLZonosCheckoutPaymentElementEventMap {
        "continueClicked": void;
    }
    interface HTMLZonosCheckoutPaymentElement extends Components.ZonosCheckoutPayment, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosCheckoutPaymentElementEventMap>(type: K, listener: (this: HTMLZonosCheckoutPaymentElement, ev: ZonosCheckoutPaymentCustomEvent<HTMLZonosCheckoutPaymentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosCheckoutPaymentElementEventMap>(type: K, listener: (this: HTMLZonosCheckoutPaymentElement, ev: ZonosCheckoutPaymentCustomEvent<HTMLZonosCheckoutPaymentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosCheckoutPaymentElement: {
        prototype: HTMLZonosCheckoutPaymentElement;
        new (): HTMLZonosCheckoutPaymentElement;
    };
    interface HTMLZonosCheckoutProgressTabsElement extends Components.ZonosCheckoutProgressTabs, HTMLStencilElement {
    }
    var HTMLZonosCheckoutProgressTabsElement: {
        prototype: HTMLZonosCheckoutProgressTabsElement;
        new (): HTMLZonosCheckoutProgressTabsElement;
    };
    interface HTMLZonosCollapseElement extends Components.ZonosCollapse, HTMLStencilElement {
    }
    var HTMLZonosCollapseElement: {
        prototype: HTMLZonosCollapseElement;
        new (): HTMLZonosCollapseElement;
    };
    interface HTMLZonosComponentElement extends Components.ZonosComponent, HTMLStencilElement {
    }
    var HTMLZonosComponentElement: {
        prototype: HTMLZonosComponentElement;
        new (): HTMLZonosComponentElement;
    };
    interface HTMLZonosConfirmDialogElementEventMap {
        "confirmClicked": void;
        "cancelClicked": void;
    }
    interface HTMLZonosConfirmDialogElement extends Components.ZonosConfirmDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosConfirmDialogElementEventMap>(type: K, listener: (this: HTMLZonosConfirmDialogElement, ev: ZonosConfirmDialogCustomEvent<HTMLZonosConfirmDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosConfirmDialogElementEventMap>(type: K, listener: (this: HTMLZonosConfirmDialogElement, ev: ZonosConfirmDialogCustomEvent<HTMLZonosConfirmDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosConfirmDialogElement: {
        prototype: HTMLZonosConfirmDialogElement;
        new (): HTMLZonosConfirmDialogElement;
    };
    interface HTMLZonosControllerElementEventMap {
        "stripeInitEvent": { publishableKey: string };
    }
    interface HTMLZonosControllerElement extends Components.ZonosController, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosControllerElementEventMap>(type: K, listener: (this: HTMLZonosControllerElement, ev: ZonosControllerCustomEvent<HTMLZonosControllerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosControllerElementEventMap>(type: K, listener: (this: HTMLZonosControllerElement, ev: ZonosControllerCustomEvent<HTMLZonosControllerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosControllerElement: {
        prototype: HTMLZonosControllerElement;
        new (): HTMLZonosControllerElement;
    };
    interface HTMLZonosCountryFlagElement extends Components.ZonosCountryFlag, HTMLStencilElement {
    }
    var HTMLZonosCountryFlagElement: {
        prototype: HTMLZonosCountryFlagElement;
        new (): HTMLZonosCountryFlagElement;
    };
    interface HTMLZonosCountrySelectElement extends Components.ZonosCountrySelect, HTMLStencilElement {
    }
    var HTMLZonosCountrySelectElement: {
        prototype: HTMLZonosCountrySelectElement;
        new (): HTMLZonosCountrySelectElement;
    };
    interface HTMLZonosCustomMessageElement extends Components.ZonosCustomMessage, HTMLStencilElement {
    }
    var HTMLZonosCustomMessageElement: {
        prototype: HTMLZonosCustomMessageElement;
        new (): HTMLZonosCustomMessageElement;
    };
    interface HTMLZonosCustomerInfoElementEventMap {
        "continueClicked": void;
    }
    interface HTMLZonosCustomerInfoElement extends Components.ZonosCustomerInfo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosCustomerInfoElementEventMap>(type: K, listener: (this: HTMLZonosCustomerInfoElement, ev: ZonosCustomerInfoCustomEvent<HTMLZonosCustomerInfoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosCustomerInfoElementEventMap>(type: K, listener: (this: HTMLZonosCustomerInfoElement, ev: ZonosCustomerInfoCustomEvent<HTMLZonosCustomerInfoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosCustomerInfoElement: {
        prototype: HTMLZonosCustomerInfoElement;
        new (): HTMLZonosCustomerInfoElement;
    };
    interface HTMLZonosDialogElementEventMap {
        "closeDialog": void;
    }
    interface HTMLZonosDialogElement extends Components.ZonosDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosDialogElementEventMap>(type: K, listener: (this: HTMLZonosDialogElement, ev: ZonosDialogCustomEvent<HTMLZonosDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosDialogElementEventMap>(type: K, listener: (this: HTMLZonosDialogElement, ev: ZonosDialogCustomEvent<HTMLZonosDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosDialogElement: {
        prototype: HTMLZonosDialogElement;
        new (): HTMLZonosDialogElement;
    };
    interface HTMLZonosHelloElement extends Components.ZonosHello, HTMLStencilElement {
    }
    var HTMLZonosHelloElement: {
        prototype: HTMLZonosHelloElement;
        new (): HTMLZonosHelloElement;
    };
    interface HTMLZonosHelloDialogElementEventMap {
        "closeDialog": void;
    }
    interface HTMLZonosHelloDialogElement extends Components.ZonosHelloDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosHelloDialogElementEventMap>(type: K, listener: (this: HTMLZonosHelloDialogElement, ev: ZonosHelloDialogCustomEvent<HTMLZonosHelloDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosHelloDialogElementEventMap>(type: K, listener: (this: HTMLZonosHelloDialogElement, ev: ZonosHelloDialogCustomEvent<HTMLZonosHelloDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosHelloDialogElement: {
        prototype: HTMLZonosHelloDialogElement;
        new (): HTMLZonosHelloDialogElement;
    };
    interface HTMLZonosHelloDialogFooterElement extends Components.ZonosHelloDialogFooter, HTMLStencilElement {
    }
    var HTMLZonosHelloDialogFooterElement: {
        prototype: HTMLZonosHelloDialogFooterElement;
        new (): HTMLZonosHelloDialogFooterElement;
    };
    interface HTMLZonosIconElement extends Components.ZonosIcon, HTMLStencilElement {
    }
    var HTMLZonosIconElement: {
        prototype: HTMLZonosIconElement;
        new (): HTMLZonosIconElement;
    };
    interface HTMLZonosInputElementEventMap {
        "inputChange": string;
    }
    interface HTMLZonosInputElement extends Components.ZonosInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosInputElementEventMap>(type: K, listener: (this: HTMLZonosInputElement, ev: ZonosInputCustomEvent<HTMLZonosInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosInputElementEventMap>(type: K, listener: (this: HTMLZonosInputElement, ev: ZonosInputCustomEvent<HTMLZonosInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosInputElement: {
        prototype: HTMLZonosInputElement;
        new (): HTMLZonosInputElement;
    };
    interface HTMLZonosLanguageSelectElement extends Components.ZonosLanguageSelect, HTMLStencilElement {
    }
    var HTMLZonosLanguageSelectElement: {
        prototype: HTMLZonosLanguageSelectElement;
        new (): HTMLZonosLanguageSelectElement;
    };
    interface HTMLZonosLinkElement extends Components.ZonosLink, HTMLStencilElement {
    }
    var HTMLZonosLinkElement: {
        prototype: HTMLZonosLinkElement;
        new (): HTMLZonosLinkElement;
    };
    interface HTMLZonosLinkAuthenticationElement extends Components.ZonosLinkAuthentication, HTMLStencilElement {
    }
    var HTMLZonosLinkAuthenticationElement: {
        prototype: HTMLZonosLinkAuthenticationElement;
        new (): HTMLZonosLinkAuthenticationElement;
    };
    interface HTMLZonosLogoElement extends Components.ZonosLogo, HTMLStencilElement {
    }
    var HTMLZonosLogoElement: {
        prototype: HTMLZonosLogoElement;
        new (): HTMLZonosLogoElement;
    };
    interface HTMLZonosNotificationElement extends Components.ZonosNotification, HTMLStencilElement {
    }
    var HTMLZonosNotificationElement: {
        prototype: HTMLZonosNotificationElement;
        new (): HTMLZonosNotificationElement;
    };
    interface HTMLZonosPaymentElement extends Components.ZonosPayment, HTMLStencilElement {
    }
    var HTMLZonosPaymentElement: {
        prototype: HTMLZonosPaymentElement;
        new (): HTMLZonosPaymentElement;
    };
    interface HTMLZonosReviewElement extends Components.ZonosReview, HTMLStencilElement {
    }
    var HTMLZonosReviewElement: {
        prototype: HTMLZonosReviewElement;
        new (): HTMLZonosReviewElement;
    };
    interface HTMLZonosSelectDialogHeaderElement extends Components.ZonosSelectDialogHeader, HTMLStencilElement {
    }
    var HTMLZonosSelectDialogHeaderElement: {
        prototype: HTMLZonosSelectDialogHeaderElement;
        new (): HTMLZonosSelectDialogHeaderElement;
    };
    interface HTMLZonosShippingElementEventMap {
        "continueClicked": void;
    }
    interface HTMLZonosShippingElement extends Components.ZonosShipping, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosShippingElementEventMap>(type: K, listener: (this: HTMLZonosShippingElement, ev: ZonosShippingCustomEvent<HTMLZonosShippingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosShippingElementEventMap>(type: K, listener: (this: HTMLZonosShippingElement, ev: ZonosShippingCustomEvent<HTMLZonosShippingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosShippingElement: {
        prototype: HTMLZonosShippingElement;
        new (): HTMLZonosShippingElement;
    };
    interface HTMLZonosShippingRichRadioElementEventMap {
        "radioSelected": ShippingRichRadioItem;
    }
    interface HTMLZonosShippingRichRadioElement extends Components.ZonosShippingRichRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZonosShippingRichRadioElementEventMap>(type: K, listener: (this: HTMLZonosShippingRichRadioElement, ev: ZonosShippingRichRadioCustomEvent<HTMLZonosShippingRichRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZonosShippingRichRadioElementEventMap>(type: K, listener: (this: HTMLZonosShippingRichRadioElement, ev: ZonosShippingRichRadioCustomEvent<HTMLZonosShippingRichRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZonosShippingRichRadioElement: {
        prototype: HTMLZonosShippingRichRadioElement;
        new (): HTMLZonosShippingRichRadioElement;
    };
    interface HTMLZonosSpinnerElement extends Components.ZonosSpinner, HTMLStencilElement {
    }
    var HTMLZonosSpinnerElement: {
        prototype: HTMLZonosSpinnerElement;
        new (): HTMLZonosSpinnerElement;
    };
    interface HTMLZonosTextElement extends Components.ZonosText, HTMLStencilElement {
    }
    var HTMLZonosTextElement: {
        prototype: HTMLZonosTextElement;
        new (): HTMLZonosTextElement;
    };
    interface HTMLZonosTooltipElement extends Components.ZonosTooltip, HTMLStencilElement {
    }
    var HTMLZonosTooltipElement: {
        prototype: HTMLZonosTooltipElement;
        new (): HTMLZonosTooltipElement;
    };
    interface HTMLZonosVStackElement extends Components.ZonosVStack, HTMLStencilElement {
    }
    var HTMLZonosVStackElement: {
        prototype: HTMLZonosVStackElement;
        new (): HTMLZonosVStackElement;
    };
    interface HTMLElementTagNameMap {
        "zonos-address": HTMLZonosAddressElement;
        "zonos-address-display": HTMLZonosAddressDisplayElement;
        "zonos-address-form": HTMLZonosAddressFormElement;
        "zonos-address-update-dialog": HTMLZonosAddressUpdateDialogElement;
        "zonos-badge": HTMLZonosBadgeElement;
        "zonos-banner": HTMLZonosBannerElement;
        "zonos-button": HTMLZonosButtonElement;
        "zonos-card": HTMLZonosCardElement;
        "zonos-cart-items": HTMLZonosCartItemsElement;
        "zonos-cart-restricted-items": HTMLZonosCartRestrictedItemsElement;
        "zonos-cart-subtotal": HTMLZonosCartSubtotalElement;
        "zonos-checkbox": HTMLZonosCheckboxElement;
        "zonos-checkout": HTMLZonosCheckoutElement;
        "zonos-checkout-finish": HTMLZonosCheckoutFinishElement;
        "zonos-checkout-footer": HTMLZonosCheckoutFooterElement;
        "zonos-checkout-payment": HTMLZonosCheckoutPaymentElement;
        "zonos-checkout-progress-tabs": HTMLZonosCheckoutProgressTabsElement;
        "zonos-collapse": HTMLZonosCollapseElement;
        "zonos-component": HTMLZonosComponentElement;
        "zonos-confirm-dialog": HTMLZonosConfirmDialogElement;
        "zonos-controller": HTMLZonosControllerElement;
        "zonos-country-flag": HTMLZonosCountryFlagElement;
        "zonos-country-select": HTMLZonosCountrySelectElement;
        "zonos-custom-message": HTMLZonosCustomMessageElement;
        "zonos-customer-info": HTMLZonosCustomerInfoElement;
        "zonos-dialog": HTMLZonosDialogElement;
        "zonos-hello": HTMLZonosHelloElement;
        "zonos-hello-dialog": HTMLZonosHelloDialogElement;
        "zonos-hello-dialog-footer": HTMLZonosHelloDialogFooterElement;
        "zonos-icon": HTMLZonosIconElement;
        "zonos-input": HTMLZonosInputElement;
        "zonos-language-select": HTMLZonosLanguageSelectElement;
        "zonos-link": HTMLZonosLinkElement;
        "zonos-link-authentication": HTMLZonosLinkAuthenticationElement;
        "zonos-logo": HTMLZonosLogoElement;
        "zonos-notification": HTMLZonosNotificationElement;
        "zonos-payment": HTMLZonosPaymentElement;
        "zonos-review": HTMLZonosReviewElement;
        "zonos-select-dialog-header": HTMLZonosSelectDialogHeaderElement;
        "zonos-shipping": HTMLZonosShippingElement;
        "zonos-shipping-rich-radio": HTMLZonosShippingRichRadioElement;
        "zonos-spinner": HTMLZonosSpinnerElement;
        "zonos-text": HTMLZonosTextElement;
        "zonos-tooltip": HTMLZonosTooltipElement;
        "zonos-v-stack": HTMLZonosVStackElement;
    }
}
declare namespace LocalJSX {
    interface ZonosAddress {
        /**
          * Default address for stripe
         */
        "defaultAddress"?: ContactOption | null;
        /**
          * Event to emit when address is not containing allowed character sets
         */
        "onInvalidCharacters"?: (event: ZonosAddressCustomEvent<boolean>) => void;
        /**
          * The title text for the address element
         */
        "titleText": string;
        /**
          * The type of address element to render
         */
        "type": 'billing' | 'shipping';
    }
    interface ZonosAddressDisplay {
        /**
          * Title for the address display
         */
        "addressType": 'shipping' | 'billing';
        /**
          * Address to show up
         */
        "currentAddress": EnteredInfo;
    }
    interface ZonosAddressForm {
        /**
          * Title for the address form
         */
        "addressType": 'shipping' | 'billing';
        /**
          * Address to show up
         */
        "currentAddress": EnteredInfo;
        /**
          * Event to emit when the address is changed
         */
        "onAddressChange"?: (event: ZonosAddressFormCustomEvent<EnteredInfo>) => void;
        /**
          * Translated address
         */
        "translatedAddress": TranslatedAddressObject;
    }
    interface ZonosAddressUpdateDialog {
        /**
          * Billing address that user has entered (optional if billing is the same as shipping)
         */
        "billingAddress": EnteredInfo | null;
        /**
          * Whether or not the continue button is loading
         */
        "continueLoading"?: boolean;
        /**
          * Whether or not the dialog is loading
         */
        "dialogLoading": boolean;
        /**
          * Whether or not the dialog is open
         */
        "dialogOpen"?: boolean;
        /**
          * Whether or not the dialog is open
         */
        "isMobile"?: boolean;
        /**
          * Close dialog button click
         */
        "onCloseDialog"?: (event: ZonosAddressUpdateDialogCustomEvent<void>) => void;
        /**
          * Event to emit when the continue button is clicked
         */
        "onContinueClicked"?: (event: ZonosAddressUpdateDialogCustomEvent<SubmitEventData>) => void;
        /**
          * Shipping address that user has entered
         */
        "shippingAddress": EnteredInfo;
        /**
          * Button color of the submit button
         */
        "submitBtnColor"?: string;
        /**
          * Button type of the submit button
         */
        "submitBtnType"?: HTMLZonosButtonElement['variant'];
        /**
          * Translated address fields that GPT has translated
         */
        "translatedBillingAddress": TranslatedAddressObject;
        /**
          * Translated address fields that GPT has translated
         */
        "translatedShippingAddress": TranslatedAddressObject;
    }
    interface ZonosBadge {
        /**
          * The size of the badge
          * @default 24
         */
        "badgeColor"?: ColorPrefix;
        /**
          * Whether or not the badge is bold
          * @default false
         */
        "bold"?: boolean;
        /**
          * The icon element to display
          * @default null
         */
        "icon"?: HTMLZonosIconElement;
        /**
          * Position the icon to the right when icon is specified
          * @default false
         */
        "iconRight"?: boolean;
        /**
          * Whether or not the badge is rounded
          * @default false
         */
        "rounded"?: boolean;
        /**
          * The size of the badge
          * @default 'default'
         */
        "size"?: 'small' | 'default';
    }
    interface ZonosBanner {
        /**
          * Whether or not the banner is bold
         */
        "bannerTitle"?: string;
        /**
          * Intent of the banner (success, warning, error)
         */
        "intent"?: BannerIntent;
    }
    interface ZonosButton {
        /**
          * The color of the button text and svg **NOTE**: If the button `variant` is set to 'standard', backgroundColor will be disregarded
         */
        "backgroundColor"?: Color | (string & { _placeholder?: never });
        /**
          * The border style of the button
          * @default ROUNDED
         */
        "borderStyle"?: ElementsUiStyle;
        /**
          * The color of the button text and svg
         */
        "buttonColor"?: Color | (string & { _placeholder?: never });
        /**
          * The icon element to display
          * @default null
         */
        "icon"?: HTMLZonosIconElement | null;
        /**
          * Whether or not the icon is on the right
          * @default false
         */
        "iconRight"?: boolean;
        /**
          * Whether or not the button is disabled
          * @note Prop should not conflict name with native html attribute if the prop is also affected by another prop. The issue is the component has internal disabled
          * @prop ().
          * @prop decorator is to watch the update of the attribute of the component in the dom. And `disabled` prop is not an only factor to determine the component is disabled. isLoading
          * @prop () also affect that. <Host> is also referred to a component itself, if disabled prop is true, the `zonos-button` will have disabled attribute. So let's say when the loading state is true, and the component consume the zonos-button doesn't pass the disabled prop down. It accidentally turns the disabled prop on even thought the disabled state is not changed from the outside.
         */
        "isDisabled"?: boolean;
        /**
          * Whether or not the button is loading
         */
        "loading"?: boolean;
        /**
          * Whether or not the button has a background
          * @default false
         */
        "noBackground"?: boolean;
        /**
          * Whether or not the button has a left padding
         */
        "noPaddingLeft"?: boolean;
        /**
          * Whether or not the button has a right padding
         */
        "noPaddingRight"?: boolean;
        /**
          * The size of the button
          * @default 'sm'
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The theme of the button
         */
        "theme"?: ElementsUiTheme;
        /**
          * The variance of the button
          * @note If the button `variant` is set to 'standard', backgroundColor will be disregarded
          * @default standard
         */
        "variant"?: | 'primary'
    | 'success'
    | 'subtle'
    | 'outline'
    | 'standard'
    | 'danger'
    | 'warning';
        /**
          * Whether or not the button has a box shadow
         */
        "withBoxShadow"?: boolean;
    }
    interface ZonosCard {
        /**
          * The actions to display in the header of the card
         */
        "actions"?: HTMLElement;
        /**
          * The actions to display in the footer of the card
         */
        "footerActions"?: HTMLElement;
        /**
          * The content to display in the footer of the card
         */
        "footerContent"?: HTMLElement;
        /**
          * The height of the footer in pixels
         */
        "footerHeight"?: number;
        /**
          * The label to display in the header of the card
         */
        "label"?: HTMLElement;
        /**
          * The spacing to apply between elements in the card
         */
        "spacing"?: string;
    }
    interface ZonosCartItems {
    }
    interface ZonosCartRestrictedItems {
        /**
          * This is to hide the section when the parent collapse on mobile
         */
        "hide"?: boolean;
    }
    interface ZonosCartSubtotal {
    }
    interface ZonosCheckbox {
        /**
          * background color of the checkbox
         */
        "backgroundColor"?: | CheckboxColorPrefix
    | (string & { _placeholder?: never });
        /**
          * The border style of the button
          * @default ROUNDED
         */
        "borderStyle"?: ElementsUiStyle;
        /**
          * Font size of the checkbox text
         */
        "fontSize"?: Size;
        /**
          * Whether or not the checkbox is checked
         */
        "isChecked"?: boolean;
        /**
          * Whether or not the checkbox is disabled
         */
        "isDisabled"?: boolean;
        /**
          * The label of the checkbox
         */
        "label"?: string;
        /**
          * Event to emit when the checkbox is changed
         */
        "onCheckboxSelected"?: (event: ZonosCheckboxCustomEvent<boolean>) => void;
        /**
          * Size of the checkbox
         */
        "size"?: 12 | 16 | 24;
    }
    interface ZonosCheckout {
        /**
          * Override appearance config
         */
        "appearanceSettingsOverride"?: Partial<AppearanceConfig>;
        /**
          * Default address to use for the checkout (preview mode)
         */
        "defaultAddress"?: StripeStoreContactOption | null;
        /**
          * Force dialog to be open
         */
        "forceDialogOpen"?: boolean;
        /**
          * Flag to determine if the checkout is on mobile
         */
        "mobile"?: boolean;
        /**
          * Preview checkout without needing to click on the button. This would be useful for demo purpose
         */
        "preview"?: boolean;
    }
    interface ZonosCheckoutFinish {
        /**
          * The border radius style of the dialog
         */
        "borderRadius"?: ElementsUiStyle;
        /**
          * Event to emit when the continue button is clicked
         */
        "onCloseClick"?: (event: ZonosCheckoutFinishCustomEvent<void>) => void;
        /**
          * Override the notification message and title, bypass checking stripe payment status
         */
        "overrideNotification"?: {
    messages: string[];
    title: string;
    type: 'success' | 'error';
  };
        /**
          * Force status to test the UI for storybook
         */
        "storybookForceStatus"?: PaymentIntent['status'];
    }
    interface ZonosCheckoutFooter {
        /**
          * Theme to change the color of the logo
         */
        "dataTheme"?: ElementsUiTheme;
        /**
          * Override mobile mode
         */
        "mobile"?: boolean;
    }
    interface ZonosCheckoutPayment {
        /**
          * Whether or not the continue button is loading
         */
        "continueLoading"?: boolean;
        /**
          * Event to emit when the continue button is clicked
         */
        "onContinueClicked"?: (event: ZonosCheckoutPaymentCustomEvent<void>) => void;
        /**
          * Error occurred during payment
         */
        "paymentError"?: boolean;
        /**
          * Submit button main color
         */
        "submitBtnColor"?: string;
        /**
          * Whether or not the checkout is in mobile mode
         */
        "submitBtnType"?: HTMLZonosButtonElement['variant'];
    }
    interface ZonosCheckoutProgressTabs {
        /**
          * Background color of the parent that's wrapped around the tab progress bar
         */
        "backgroundColor"?: Color | (string & { _placeholder?: never }) | null;
        /**
          * Color of the tab progress bar and label, override the secondary color of the appearance settings
         */
        "tabColor"?: string | null;
    }
    interface ZonosCollapse {
        /**
          * Collapsed size when collapsed
         */
        "collapseSize"?: number;
        /**
          * Collapsed state of the element
         */
        "collapsed"?: boolean;
    }
    interface ZonosComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ZonosConfirmDialog {
        /**
          * Cancel button text
         */
        "dialogCancelBtnText": string;
        /**
          * Confirm button text
         */
        "dialogConfirmBtnText": string;
        /**
          * Dialog intent (for icon and button color)
          * @default "info"
         */
        "dialogIntent"?: 'info' | 'danger' | 'warn';
        /**
          * Whether or not the dialog is open
         */
        "dialogOpen"?: boolean;
        /**
          * Dialog subtitle text
          * @default "" No subtitle
         */
        "dialogSubtitle"?: string;
        /**
          * Dialog title text
          * @default "Are you sure?"
         */
        "dialogTitle"?: string;
        /**
          * Whether or not the dialog is open
         */
        "isMobile"?: boolean;
        /**
          * Whether or not to close the dialog when clicking outside of it
          * @default false
         */
        "noClickOutside"?: boolean;
        /**
          * Event to emit when the "Cancel" button is clicked
         */
        "onCancelClicked"?: (event: ZonosConfirmDialogCustomEvent<void>) => void;
        /**
          * Event to emit when the "Confirm" button is clicked
         */
        "onConfirmClicked"?: (event: ZonosConfirmDialogCustomEvent<void>) => void;
        /**
          * Submit button main color
         */
        "submitBtnColor"?: string;
    }
    interface ZonosController {
        /**
          * The zonos config object
         */
        "config": LoadZonosParamsConfig;
        /**
          * Event emitted when stripe is initialized
         */
        "onStripeInitEvent"?: (event: ZonosControllerCustomEvent<{ publishableKey: string }>) => void;
        /**
          * The zonos api key
         */
        "zonosApiKey": string;
    }
    interface ZonosCountryFlag {
        /**
          * The country code for the flag
          * @default localizationStore.selectedCountryCode
          * @example 'US'
         */
        "countryCode"?: CountryCode | null;
        /**
          * The size of the flag
         */
        "size"?: number;
    }
    interface ZonosCountrySelect {
        /**
          * Function to close the country select
          * @default () => {}
         */
        "handleOnClose"?: () => void;
    }
    interface ZonosCustomMessage {
        /**
          * The custom message icon
         */
        "icon"?: string;
        /**
          * The custom message text
         */
        "message"?: string;
    }
    interface ZonosCustomerInfo {
        /**
          * Whether or not the continue button is loading
         */
        "continueLoading"?: boolean;
        /**
          * Default address to use for the checkout (preview mode)
         */
        "defaultAddress"?: StripeStoreContactOption | null;
        /**
          * Whether or not the dialog is open
         */
        "isMobile"?: boolean;
        /**
          * Event to emit when the continue button is clicked
         */
        "onContinueClicked"?: (event: ZonosCustomerInfoCustomEvent<void>) => void;
        /**
          * Submit button main color
         */
        "submitBtnColor"?: string;
        /**
          * Whether or not the checkout is in mobile mode
         */
        "submitBtnType"?: HTMLZonosButtonElement['variant'];
    }
    interface ZonosDialog {
        /**
          * The border style of the button
          * @default ROUNDED
         */
        "borderStyle"?: ElementsUiStyle;
        /**
          * The header text for the dialog
         */
        "headerText"?: string;
        /**
          * The height of the dialog (max-width still 90vh)
         */
        "height"?: string;
        /**
          * Load loading spinner for the dialog or not
         */
        "isLoading"?: boolean;
        /**
          * The min height of the dialog
         */
        "minHeight"?: string;
        /**
          * Flag to determine if the checkout is on mobile
         */
        "mobile"?: boolean;
        /**
          * Whether or not to have body padding
          * @default false
         */
        "noBodyPadding"?: boolean;
        /**
          * Whether or not to have body padding
          * @default false
         */
        "noBorder"?: boolean;
        /**
          * Whether or not to close the dialog when clicking outside of it
          * @default false
         */
        "noClickOutside"?: boolean;
        /**
          * Whether or not to show the close button
          * @default false
         */
        "noCloseButton"?: boolean;
        /**
          * Whether or not to show the header
          * @default false
         */
        "noHeader"?: boolean;
        /**
          * Close dialog button click
         */
        "onCloseDialog"?: (event: ZonosDialogCustomEvent<void>) => void;
        /**
          * Whether or not the dialog is open
          * @default false
         */
        "open"?: boolean;
        /**
          * The width of the dialog
          * @default 460px
         */
        "width"?: string;
    }
    interface ZonosHello {
        /**
          * Force left animation instead of detecting which side has more space
          * @default false
         */
        "animateFromLeftOverride"?: boolean;
        /**
          * Override the appearance settings
         */
        "appearanceSettingsOverride"?: Partial<AppearanceConfig>;
        /**
          * Force mobile styling instead of media query and use the passed location value
          * @default false
         */
        "mobileLocationOverride"?: HelloMobileLocation;
    }
    interface ZonosHelloDialog {
        /**
          * Force left animation instead of detecting which side has more space
          * @default false
         */
        "animateFromLeftOverride"?: boolean;
        /**
          * Override the appearance settings
         */
        "appearanceSettings"?: Partial<AppearanceConfig>;
        /**
          * Whether or not the dialog is open
         */
        "isOpen"?: boolean;
        /**
          * Force mobile styling instead of media query and use the passed location value
          * @default false
         */
        "mobileLocationOverride"?: HelloMobileLocation;
        /**
          * Close dialog button click
         */
        "onCloseDialog"?: (event: ZonosHelloDialogCustomEvent<void>) => void;
        /**
          * Item restrictions array if any
          * @default []
         */
        "restrictedItems"?: RestrictedItem[];
        /**
          * The function to set the open state
          * @default () => {}
         */
        "setIsOpen"?: (isOpen: boolean) => void;
    }
    interface ZonosHelloDialogFooter {
        /**
          * Appearance settings
         */
        "appearanceSettings"?: Partial<AppearanceConfig>;
        /**
          * Whether or not the country select dialog is open
          * @default false
         */
        "setShowCountrySelect"?: (value: boolean) => void;
        /**
          * Whether or not the language select dialog is open
          * @default false
         */
        "setShowLanguageSelect"?: (value: boolean) => void;
    }
    interface ZonosIcon {
        /**
          * Determines if the icon should be auto height instead of square
          * @default false
         */
        "autoHeight"?: boolean;
        /**
          * The content of the icon (full svg)
          * @example import RemoveIcon from './assets/removeIcon.svg'; ... <zonos-icon content={RemoveIcon}></zonos-icon> // or <zonos-icon content="<svg>...</svg>"></zonos-icon>
         */
        "content": string;
        /**
          * Color of the SVG
          * @default 'gray-1200'
         */
        "iconColor"?: Color | (string & { _placeholder?: never });
        /**
          * The size of the icon
          * @default 24
         */
        "size"?: number;
    }
    interface ZonosInput {
        /**
          * Input label
         */
        "inputLabel": string;
        /**
          * Placeholder for the input
         */
        "inputPlaceholder"?: string;
        /**
          * Input size
         */
        "inputSize"?: 'sm' | 'md' | 'lg' | 'xl';
        /**
          * Value of the input
         */
        "inputValue"?: string;
        /**
          * Disables the input
         */
        "isDisabled"?: boolean;
        /**
          * Error state of the input
         */
        "isError"?: boolean;
        /**
          * Event to emit when input value changes
         */
        "onInputChange"?: (event: ZonosInputCustomEvent<string>) => void;
    }
    interface ZonosLanguageSelect {
        /**
          * Function to close the language select
          * @default () => {}
         */
        "handleOnClose"?: () => void;
    }
    interface ZonosLink {
        /**
          * The href for the link
         */
        "href"?: string;
        /**
          * The title attribute for the link
         */
        "linkTitle"?: string;
        /**
          * The rel attribute for the link
         */
        "rel"?: string;
        /**
          * The target attribute for the link
         */
        "target"?: string;
    }
    interface ZonosLinkAuthentication {
        /**
          * Default email for stripe
         */
        "defaultEmail"?: string | null;
        /**
          * The title text for the authentication element
         */
        "titleText": string;
    }
    interface ZonosLogo {
        /**
          * Theme to change the color of the logo
         */
        "theme"?: ElementsUiTheme;
        /**
          * The width of the logo
         */
        "width"?: string;
    }
    interface ZonosNotification {
    }
    interface ZonosPayment {
        /**
          * The title text for the authentication element
         */
        "titleText"?: string;
    }
    interface ZonosReview {
        /**
          * Whether or not to show the collapse icon This is controled from the collapsed state of the zonos-collapse component to show the collapse icon
         */
        "collapsed"?: boolean;
        /**
          * Whether or not the component is being rendered with mobile styles
         */
        "mobile"?: boolean;
    }
    interface ZonosSelectDialogHeader {
        /**
          * Callback to do something on close
          * @default () => {}
         */
        "handleOnClose"?: () => void;
        /**
          * The label for the select dialog
         */
        "label"?: string;
    }
    interface ZonosShipping {
        /**
          * Whether or not the continue button is loading
         */
        "continueLoading"?: boolean;
        /**
          * Event to emit when the continue button is clicked
         */
        "onContinueClicked"?: (event: ZonosShippingCustomEvent<void>) => void;
        /**
          * Submit button main color
         */
        "submitBtnColor"?: string;
        /**
          * Whether or not the checkout is in mobile mode
         */
        "submitBtnType"?: HTMLZonosButtonElement['variant'];
    }
    interface ZonosShippingRichRadio {
        /**
          * Override border color of the radio item
         */
        "borderColor"?: Color | (string & { _placeholder?: never });
        /**
          * Override border color of the radio item
         */
        "borderStyle"?: ElementsUiStyle;
        /**
          * Initial selected value
         */
        "initialSelectedValue"?: string | number;
        /**
          * List of items to display
         */
        "items": ShippingRichRadioItem[];
        /**
          * Event emitted when an item is selected
         */
        "onRadioSelected"?: (event: ZonosShippingRichRadioCustomEvent<ShippingRichRadioItem>) => void;
        /**
          * Theme of the radio item
         */
        "theme"?: ElementsUiTheme;
    }
    interface ZonosSpinner {
        /**
          * The size of the spinner
          * @default 32
         */
        "size"?: number;
        /**
          * Color of the spinner
         */
        "spinnerColor"?: SpinnerColor;
    }
    interface ZonosText {
        /**
          * The size of the text
         */
        "size"?: Size;
        /**
          * The icon element to display
         */
        "textColor"?: Color | (string & { _placeholder?: never });
        /**
          * Type of the text to display
         */
        "type"?: Type;
        /**
          * The weight of the text
         */
        "weight"?: FontWeight;
    }
    interface ZonosTooltip {
        /**
          * The title of the tooltip
         */
        "label"?: string;
        /**
          * The subtitle of the tooltip
         */
        "subtitle"?: string;
    }
    interface ZonosVStack {
        /**
          * The spacing between elements in the stack
          * @default 24
         */
        "spacing"?: GridSpacing;
    }
    interface IntrinsicElements {
        "zonos-address": ZonosAddress;
        "zonos-address-display": ZonosAddressDisplay;
        "zonos-address-form": ZonosAddressForm;
        "zonos-address-update-dialog": ZonosAddressUpdateDialog;
        "zonos-badge": ZonosBadge;
        "zonos-banner": ZonosBanner;
        "zonos-button": ZonosButton;
        "zonos-card": ZonosCard;
        "zonos-cart-items": ZonosCartItems;
        "zonos-cart-restricted-items": ZonosCartRestrictedItems;
        "zonos-cart-subtotal": ZonosCartSubtotal;
        "zonos-checkbox": ZonosCheckbox;
        "zonos-checkout": ZonosCheckout;
        "zonos-checkout-finish": ZonosCheckoutFinish;
        "zonos-checkout-footer": ZonosCheckoutFooter;
        "zonos-checkout-payment": ZonosCheckoutPayment;
        "zonos-checkout-progress-tabs": ZonosCheckoutProgressTabs;
        "zonos-collapse": ZonosCollapse;
        "zonos-component": ZonosComponent;
        "zonos-confirm-dialog": ZonosConfirmDialog;
        "zonos-controller": ZonosController;
        "zonos-country-flag": ZonosCountryFlag;
        "zonos-country-select": ZonosCountrySelect;
        "zonos-custom-message": ZonosCustomMessage;
        "zonos-customer-info": ZonosCustomerInfo;
        "zonos-dialog": ZonosDialog;
        "zonos-hello": ZonosHello;
        "zonos-hello-dialog": ZonosHelloDialog;
        "zonos-hello-dialog-footer": ZonosHelloDialogFooter;
        "zonos-icon": ZonosIcon;
        "zonos-input": ZonosInput;
        "zonos-language-select": ZonosLanguageSelect;
        "zonos-link": ZonosLink;
        "zonos-link-authentication": ZonosLinkAuthentication;
        "zonos-logo": ZonosLogo;
        "zonos-notification": ZonosNotification;
        "zonos-payment": ZonosPayment;
        "zonos-review": ZonosReview;
        "zonos-select-dialog-header": ZonosSelectDialogHeader;
        "zonos-shipping": ZonosShipping;
        "zonos-shipping-rich-radio": ZonosShippingRichRadio;
        "zonos-spinner": ZonosSpinner;
        "zonos-text": ZonosText;
        "zonos-tooltip": ZonosTooltip;
        "zonos-v-stack": ZonosVStack;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "zonos-address": LocalJSX.ZonosAddress & JSXBase.HTMLAttributes<HTMLZonosAddressElement>;
            "zonos-address-display": LocalJSX.ZonosAddressDisplay & JSXBase.HTMLAttributes<HTMLZonosAddressDisplayElement>;
            "zonos-address-form": LocalJSX.ZonosAddressForm & JSXBase.HTMLAttributes<HTMLZonosAddressFormElement>;
            "zonos-address-update-dialog": LocalJSX.ZonosAddressUpdateDialog & JSXBase.HTMLAttributes<HTMLZonosAddressUpdateDialogElement>;
            "zonos-badge": LocalJSX.ZonosBadge & JSXBase.HTMLAttributes<HTMLZonosBadgeElement>;
            "zonos-banner": LocalJSX.ZonosBanner & JSXBase.HTMLAttributes<HTMLZonosBannerElement>;
            "zonos-button": LocalJSX.ZonosButton & JSXBase.HTMLAttributes<HTMLZonosButtonElement>;
            "zonos-card": LocalJSX.ZonosCard & JSXBase.HTMLAttributes<HTMLZonosCardElement>;
            "zonos-cart-items": LocalJSX.ZonosCartItems & JSXBase.HTMLAttributes<HTMLZonosCartItemsElement>;
            "zonos-cart-restricted-items": LocalJSX.ZonosCartRestrictedItems & JSXBase.HTMLAttributes<HTMLZonosCartRestrictedItemsElement>;
            "zonos-cart-subtotal": LocalJSX.ZonosCartSubtotal & JSXBase.HTMLAttributes<HTMLZonosCartSubtotalElement>;
            "zonos-checkbox": LocalJSX.ZonosCheckbox & JSXBase.HTMLAttributes<HTMLZonosCheckboxElement>;
            "zonos-checkout": LocalJSX.ZonosCheckout & JSXBase.HTMLAttributes<HTMLZonosCheckoutElement>;
            "zonos-checkout-finish": LocalJSX.ZonosCheckoutFinish & JSXBase.HTMLAttributes<HTMLZonosCheckoutFinishElement>;
            "zonos-checkout-footer": LocalJSX.ZonosCheckoutFooter & JSXBase.HTMLAttributes<HTMLZonosCheckoutFooterElement>;
            "zonos-checkout-payment": LocalJSX.ZonosCheckoutPayment & JSXBase.HTMLAttributes<HTMLZonosCheckoutPaymentElement>;
            "zonos-checkout-progress-tabs": LocalJSX.ZonosCheckoutProgressTabs & JSXBase.HTMLAttributes<HTMLZonosCheckoutProgressTabsElement>;
            "zonos-collapse": LocalJSX.ZonosCollapse & JSXBase.HTMLAttributes<HTMLZonosCollapseElement>;
            "zonos-component": LocalJSX.ZonosComponent & JSXBase.HTMLAttributes<HTMLZonosComponentElement>;
            "zonos-confirm-dialog": LocalJSX.ZonosConfirmDialog & JSXBase.HTMLAttributes<HTMLZonosConfirmDialogElement>;
            "zonos-controller": LocalJSX.ZonosController & JSXBase.HTMLAttributes<HTMLZonosControllerElement>;
            "zonos-country-flag": LocalJSX.ZonosCountryFlag & JSXBase.HTMLAttributes<HTMLZonosCountryFlagElement>;
            "zonos-country-select": LocalJSX.ZonosCountrySelect & JSXBase.HTMLAttributes<HTMLZonosCountrySelectElement>;
            "zonos-custom-message": LocalJSX.ZonosCustomMessage & JSXBase.HTMLAttributes<HTMLZonosCustomMessageElement>;
            "zonos-customer-info": LocalJSX.ZonosCustomerInfo & JSXBase.HTMLAttributes<HTMLZonosCustomerInfoElement>;
            "zonos-dialog": LocalJSX.ZonosDialog & JSXBase.HTMLAttributes<HTMLZonosDialogElement>;
            "zonos-hello": LocalJSX.ZonosHello & JSXBase.HTMLAttributes<HTMLZonosHelloElement>;
            "zonos-hello-dialog": LocalJSX.ZonosHelloDialog & JSXBase.HTMLAttributes<HTMLZonosHelloDialogElement>;
            "zonos-hello-dialog-footer": LocalJSX.ZonosHelloDialogFooter & JSXBase.HTMLAttributes<HTMLZonosHelloDialogFooterElement>;
            "zonos-icon": LocalJSX.ZonosIcon & JSXBase.HTMLAttributes<HTMLZonosIconElement>;
            "zonos-input": LocalJSX.ZonosInput & JSXBase.HTMLAttributes<HTMLZonosInputElement>;
            "zonos-language-select": LocalJSX.ZonosLanguageSelect & JSXBase.HTMLAttributes<HTMLZonosLanguageSelectElement>;
            "zonos-link": LocalJSX.ZonosLink & JSXBase.HTMLAttributes<HTMLZonosLinkElement>;
            "zonos-link-authentication": LocalJSX.ZonosLinkAuthentication & JSXBase.HTMLAttributes<HTMLZonosLinkAuthenticationElement>;
            "zonos-logo": LocalJSX.ZonosLogo & JSXBase.HTMLAttributes<HTMLZonosLogoElement>;
            "zonos-notification": LocalJSX.ZonosNotification & JSXBase.HTMLAttributes<HTMLZonosNotificationElement>;
            "zonos-payment": LocalJSX.ZonosPayment & JSXBase.HTMLAttributes<HTMLZonosPaymentElement>;
            "zonos-review": LocalJSX.ZonosReview & JSXBase.HTMLAttributes<HTMLZonosReviewElement>;
            "zonos-select-dialog-header": LocalJSX.ZonosSelectDialogHeader & JSXBase.HTMLAttributes<HTMLZonosSelectDialogHeaderElement>;
            "zonos-shipping": LocalJSX.ZonosShipping & JSXBase.HTMLAttributes<HTMLZonosShippingElement>;
            "zonos-shipping-rich-radio": LocalJSX.ZonosShippingRichRadio & JSXBase.HTMLAttributes<HTMLZonosShippingRichRadioElement>;
            "zonos-spinner": LocalJSX.ZonosSpinner & JSXBase.HTMLAttributes<HTMLZonosSpinnerElement>;
            "zonos-text": LocalJSX.ZonosText & JSXBase.HTMLAttributes<HTMLZonosTextElement>;
            "zonos-tooltip": LocalJSX.ZonosTooltip & JSXBase.HTMLAttributes<HTMLZonosTooltipElement>;
            "zonos-v-stack": LocalJSX.ZonosVStack & JSXBase.HTMLAttributes<HTMLZonosVStackElement>;
        }
    }
}
